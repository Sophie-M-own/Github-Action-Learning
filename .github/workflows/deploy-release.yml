name: CD - Deploy on release branches

on:
  push:
    branches:
      - 'release/*'         # 仅 release/* 触发
    paths:
      - '**/*.py'
      - 'Dockerfile'
      - 'deploy/**'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      target_env:
        description: "Deploy target (staging/prod)"
        required: false
        default: "staging"

concurrency:
  group: cd-release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # 可按需改名：当手动触发时优先用输入；否则默认 staging
  TARGET_ENV: ${{ inputs.target_env || 'staging' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{env.TARGET_ENV}}     # 可接入 Environment 保护规则
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install deps (if needed)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 例如：构建并推镜像（可删/改为你的部署逻辑）
      - name: Login to DockerHub
        if: hashFiles('Dockerfile') != ''
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build & push image
        if: hashFiles('Dockerfile') != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/sample-app:${{ github.ref_name }}

      # 你的部署脚本（示例：将产物发布到服务器/云）
      - name: Deploy app
        run: |
          echo "Deploying to $TARGET_ENV from $GITHUB_REF ..."
          # 示例：./deploy/deploy.sh "$TARGET_ENV"
          # 示例：python deploy/run.py --env "$TARGET_ENV"
